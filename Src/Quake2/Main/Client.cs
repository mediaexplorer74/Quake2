/*
===========================================================================
Copyright (C) 2000-2011 Korvin Korax
Author: Jacques Krige
http://www.sagamedev.com
http://www.korvinkorax.com

This file is part of Quake2 BSP XNA Renderer source code.
Parts of the source code is copyright (C) Id Software, Inc.

Quake2 BSP XNA Renderer source code is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

Quake2 BSP XNA Renderer source code is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
===========================================================================
*/

using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using System.Text;

namespace Quake2
{
    public class CClient
    {
        public const int CMD_BACKUP = 64; // allow a lot of command backups for very fast systems

        public static SClientState cl;


        // the SClientState structure is wiped completely at every server map change
        public struct SClientState
        {
            public int timeoutcount;

            public int timedemo_frames;
            public int timedemo_start;

            public bool refresh_prepped;        // false if on new level or new ref dll
            public bool sound_prepped;          // ambient sounds can start
            public bool force_refdef;           // vid has changed, so we can't use a paused refdef

            public int parse_entities;          // index (not anded off) into cl_parse_entities[]

            //usercmd_t	cmd;
            //usercmd_t	cmds[CMD_BACKUP];	    // each mesage will send several old cmds
            public int[] cmd_time;              // size: CMD_BACKUP (time sent, for calculating pings)
            public short[,] predicted_origins;  // size: [CMD_BACKUP, 3] (for debug comparing against server)

            public float predicted_step;        // for stair up smoothing
            public uint predicted_step_time;

            public Vector3 predicted_origin;    // generated by CL_PredictMovement
            public Vector3 predicted_angles;
            public Vector3 prediction_error;

            //frame_t frame; // received from server
            public int surpressCount;           // number of messages rate supressed
            //frame_t frames[UPDATE_BACKUP];

            // the client maintains its own idea of view angles, which are sent to the server each frame.
            // It is cleared to 0 upon entering each level. The server sends a delta each frame which is added to the
            // locally tracked view angles to account for standing on rotating objects, and teleport direction changes
            public Vector3 viewangles;

            public int time;        // this is the time value that the client is rendering at. Always <= cls.realtime
            public int lerpfrac;    // between oldframe and frame

            public CLocal.SRefDef RefDef;

            // set when refdef.angles is set
            public Vector3 v_forward;
            public Vector3 v_right;
            public Vector3 v_up;

            //
            // transient data from server
            //
            public string layout; // size: 1024 (general 2D overlay)
            public int[] inventory; // size: MAX_ITEMS

            //
            // non-gameserver information
            // FIXME: move this cinematic stuff into the cin_t structure
            //FILE *cinematic_file;
            public int cinematictime;   // cls.realtime for first cinematic frame
            public int cinematicframe;
            public byte[] cinematicpalette; // size: 768
            public bool cinematicpalette_active;
            
            
            //
            // server state information
            //
            public bool attractloop;    // running the attract loop, any key will menu
            public int servercount;     // server identification for prespawns
            public string gamedir;      // size: MAX_QPATH
            public int playernum;
            public string[] configstrings;  // size: [MAX_CONFIGSTRINGS,MAX_QPATH]
            

            //
            // locally derived information from server state
            //
            //struct model_s	*model_draw[MAX_MODELS];
            //struct cmodel_s	*model_clip[MAX_MODELS];
            
            //struct sfx_s	*sound_precache[MAX_SOUNDS];
            //struct image_s	*image_precache[MAX_IMAGES];
            
            //clientinfo_t	clientinfo[MAX_CLIENTS];
            //clientinfo_t	baseclientinfo;
        }

    }
}
